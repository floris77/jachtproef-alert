#!/bin/bash

# TestFlight Mac Log Monitor for JachtProef Alert
# This script monitors logs when running TestFlight directly on macOS

echo "üíª TestFlight Mac Log Monitor for JachtProef Alert"
echo "=================================================="
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${CYAN}üîç Monitoring TestFlight logs on macOS...${NC}"
echo "üì± Make sure debug logging is enabled in the app"
echo "üí≥ Try to make a payment and watch the logs below"
echo ""

# Show available options
echo -e "${BLUE}Choose your monitoring method:${NC}"
echo ""
echo "1. üìã Console.app (recommended for TestFlight on Mac)"
echo "2. üîç Real-time log stream"
echo "3. üí≥ Payment-specific monitoring"
echo "4. üìÅ Export logs to file"
echo "5. üõ†Ô∏è Xcode Console (if available)"
echo ""

read -p "Enter your choice (1-5): " choice

case $choice in
    1)
        echo -e "${GREEN}üöÄ Opening Console.app for TestFlight on Mac...${NC}"
        echo "üìã Instructions:"
        echo "   1. In Console.app, look for 'JachtProef Alert' in the left sidebar"
        echo "   2. Or search for: process:JachtProef"
        echo "   3. Or search for: subsystem:com.fhkjin1.JachtProef-Alert"
        echo "   4. Enable debug logging in the app settings"
        echo ""
        echo "üí° Tip: Use the search bar to filter for payment-related logs"
        open -a Console
        ;;
    2)
        echo -e "${GREEN}üîç Starting real-time log monitoring...${NC}"
        echo "Press Ctrl+C to stop monitoring"
        echo ""
        
        # Monitor system logs for the app
        log stream --predicate 'process == "JachtProef Alert" OR process == "Runner" OR subsystem == "com.fhkjin1.JachtProef-Alert"' --style compact
        ;;
    3)
        echo -e "${GREEN}üí≥ Starting payment-specific monitoring...${NC}"
        echo "Press Ctrl+C to stop monitoring"
        echo ""
        
        # Monitor payment-related logs
        log stream --predicate 'process == "JachtProef Alert" OR process == "Runner" OR subsystem == "com.fhkjin1.JachtProef-Alert"' --style compact | grep -E "(PAYMENT|Payment|TestFlight|buyNonConsumable|storekit|jachtproef)" --line-buffered
        ;;
    4)
        echo -e "${GREEN}üìÅ Exporting logs to file...${NC}"
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        LOG_FILE="testflight_mac_logs_$TIMESTAMP.txt"
        
        echo "üìã Exporting to: $LOG_FILE"
        echo "üì± This may take a few moments..."
        
        # Export logs for the app
        log show --predicate 'process == "JachtProef Alert" OR process == "Runner" OR subsystem == "com.fhkjin1.JachtProef-Alert"' --last 1h > "$LOG_FILE" 2>/dev/null
        
        if [ -s "$LOG_FILE" ]; then
            echo -e "${GREEN}‚úÖ Logs exported to: $LOG_FILE${NC}"
            echo "üìä File size: $(du -h "$LOG_FILE" | cut -f1)"
            echo "üìã You can open this file in any text editor"
        else
            echo -e "${RED}‚ùå No logs found or export failed${NC}"
            rm -f "$LOG_FILE"
        fi
        ;;
    5)
        echo -e "${GREEN}üöÄ Opening Xcode Console...${NC}"
        echo "üìã Instructions:"
        echo "   1. In Xcode, go to Window ‚Üí Devices and Simulators"
        echo "   2. Look for your Mac in the list"
        echo "   3. Click 'View Device Logs'"
        echo "   4. Filter by 'JachtProef' to see app logs"
        echo ""
        echo "üí° Note: This may not work for TestFlight on Mac"
        open -a Xcode
        ;;
    *)
        echo -e "${RED}‚ùå Invalid choice. Please run the script again.${NC}"
        exit 1
        ;;
esac

echo ""
echo -e "${YELLOW}üéØ Debug Logging Tips for TestFlight on Mac:${NC}"
echo "=================================================="
echo "‚Ä¢ Enable 'Debug Logging' in the app settings"
echo "‚Ä¢ Enable 'Verbose Logging' for extra details"
echo "‚Ä¢ Use the 'Generate Test Logs' button to test"
echo "‚Ä¢ Look for logs with [JachtProef] tag"
echo "‚Ä¢ Error logs are marked with [ERROR]"
echo "‚Ä¢ Payment logs are marked with [PAYMENT]"
echo "‚Ä¢ TestFlight logs are marked with [TESTFLIGHT]"
echo ""
echo -e "${CYAN}üîß Common Log Tags:${NC}"
echo "‚Ä¢ [STARTUP] - App initialization"
echo "‚Ä¢ [FIREBASE] - Firebase operations"
echo "‚Ä¢ [PAYMENT] - Payment processing"
echo "‚Ä¢ [NOTIFICATION] - Push notifications"
echo "‚Ä¢ [USER] - User interactions"
echo "‚Ä¢ [NAVIGATION] - Screen navigation"
echo "‚Ä¢ [TESTFLIGHT] - TestFlight specific"
echo ""
echo -e "${PURPLE}üí≥ For Payment Dialog Issues:${NC}"
echo "Look for these specific messages:"
echo "‚Ä¢ 'üîç Payment Dialog: Starting for product'"
echo "‚Ä¢ 'üîç Payment Dialog: Found product'"
echo "‚Ä¢ 'üîç Payment Dialog: Calling InAppPurchase.instance.buyNonConsumable'"
echo "‚Ä¢ '‚úÖ TestFlight on Mac: Payment dialog initiated successfully'"
echo "‚Ä¢ '‚ùå TestFlight on Mac: Failed to initiate payment dialog'"
echo ""
echo -e "${GREEN}üìû Need help? Check the debug settings in the app!${NC}" 